%package ooc-wisent-wy
%languagemode ooc-mode

%start goal
%start tuple_item
%start array_literal_item
%start bracketed_block_body

;; keywords
%type <keyword>
;; Thanks to Mark Fayngersh for a good number of summaries
;;    -- [2010-07-14 Wed 23:34]
%keyword BREAK_KW "break"
%put BREAK_KW summary "for (i in 0..5) break // i will never get to be 1"
%keyword CONTINUE_KW "continue"
%put CONTINUE_KW summary "for (i in 0..5) continue // continues the loop"
%keyword RETURN_KW "return"
%put RETURN_KW summary "return VAL // called inside of a function to return a value. Last statement in function is implicit return"
%keyword FUNC_KW "func"
%put FUNC_KW summary "NAME: [extern | inline] func [~overloaded] [(PARAMS: PARAMSTYPE)] [-> RETURNTYPE] {...}"
%keyword CLASS_KW "class"
%put CLASS_KW summary "NAME: [abstract] class [extends CLASS | implements INTERFACE1, INTERFACE2] {...}"
%keyword COVER_KW "cover"
%put COVER_KW summary "NAME: cover [from TYPE] {...}"
%keyword ENUM_KW "enum"
%keyword INTERFACE_KW "interface"
%put INTERFACE_KW summary "NAME: interface {...}"
%keyword FROM_KW "from"
%keyword ABSTRACT_KW "abstract"
%put ABSTRACT_KW summary "NAME: abstract func {...} | NAME: abstract class {...}"
%keyword FINAL_KW "final"
%keyword STATIC_KW "static"
%put STATIC_KW summary "NAME: static func {...}"
%keyword INLINE_KW "inline"
%put INLINE_KW summary "NAME: inline func {...}"
%keyword EXTENDS_KW "extends"
%put EXTENDS_KW summary "NAME: class extends OTHERCLASSNAME {...}"
%keyword EXTERN_KW "extern"
%put EXTERN_KW summary "NAME: extern[(EXTERNFUNCNAME)] func"
%keyword UNMANGLED_KW "unmangled"
%put UNMANGLED_KW summary "NAME: unmangled func {...}"
%keyword IMPLEMENTS_KW "implements"
%put IMPLEMENTS_KW summary "NAME: class implements INTERFACE1,INTERFACE2 {...}"
%keyword IMPORT_KW "import"
%put IMPORT_KW summary "import FOLDER/FILE(without .ooc) | import FOLDER/[FILE1,FILE2]"
%keyword INCLUDE_KW "include"
%put INCLUDE_KW summary "include stdio"
%keyword USE_KW "use"
%put USE_KW summary "use FILE(without .ooc)"
%keyword IF_KW "if"
%put IF_KW summary "if (...) { ... } [[else | else if] { ... }]"
%keyword ELSE_KW "else"
%keyword FOR_KW "for"
%put FOR_KW summary "for (NAME in [List|Range|1..10]) {...}"
%keyword WHILE_KW "true"
%keyword MATCH_KW "match"
%keyword CASE_KW "case"
%keyword AS_KW "as"
%put AS_KW summary "TYPE as ANOTHERTYPE"
%keyword IN_KW "in"
%keyword INTO_KW "into"
%keyword VERSION_KW "version"
%keyword PROTO_KW "proto"

%keyword SET_KW "set"
%keyword GET_KW "get"

%keyword OPERATOR_KW "operator"
%keyword CONST_KW "const"

%keyword TRUE_KW "true"
%keyword FALSE_KW "false"

%keyword NULL_KW "null"



;; Simple tokens

%token <punctuation> COMMA         ","
;;%token DOT           !DOUBLE_DOT "."
%token <punctuation> DOUBLE_DOT    ".."
%token <punctuation> DOT           "."
%token <punctuation> COLON          ":"

;;%token R_ARROW       "->"
;;%token DOUBLE_ARROW  "=>"

;; Operators
%token <punctuation> ASS_DECL      ":="
%token <punctuation> ASS            "="
%token <punctuation> ASS_ADD       "+="
%token <punctuation> ASS_SUB       "-="
%token <punctuation> ASS_MUL       "*="
%token <punctuation> OOCDOC_SINGLE_LINE_START "///"
%token <punctuation> COMMENT_SINGLE_LINE_START "//"
%token <punctuation> ASS_DIV       "/="
%token <punctuation> ASS_B_RSHIFT  ">>="
%token <punctuation> ASS_B_LSHIFT  "<<="
%token <punctuation> ASS_B_XOR     "^="
%token <punctuation> ASS_B_OR      "|="
%token <punctuation> ASS_B_AND     "&="

%token <punctuation> QUESTION         "?"

%token <punctuation> LOGIC_OR          "||"

%token <punctuation> LOGIC_AND         "&&"

%token <punctuation> BINARY_OR     "|"

%token <punctuation> BINARY_XOR         "^"

%token <punctuation> BINARY_AND     "&"

%token <punctuation> EQUALS        "=="
%token <punctuation> NOT_EQUALS    "!="

%token <punctuation> LESSTHAN      "<"
%token <punctuation> MORETHAN      ">"
%token <punctuation> CMP           "<=>"
%token <punctuation> LESSTHAN_EQ   "<="
%token <punctuation> MORETHAN_EQ   ">="

%token <punctuation> BINARY_LSHIFT      "<<"
%token <punctuation> BINARY_RSHIFT      ">>"

%token <punctuation> LOGIC_NOT         "!"
%token <punctuation> BINARY_NOT         "~"
%token <punctuation> PLUS          "+"
%token <punctuation> MINUS         "-"

%token <punctuation> PERCENT       "%"
%token <punctuation> STAR          "*"
%token <punctuation> SLASH         "/"

%type <whitespace>      syntax "\\([\s]+\\)"
%type <newline>      syntax "\\(\n\\|\s>\\)"
%type <number>      syntax "-?\\(0c[0-8][0-8_]*\\|0b[01][01_]*\\|0x[0-9a-fA-F][0-9a-fA-F_]*\\|[0-9_]+\\.[0-9_]*\\|[0-9][0-9_]*\\)"

%type <block>
%token <block> PAREN_BLOCK "(OPEN_PAREN CLOSE_PAREN)"
%token <block> SQUARE_BLOCK "(OPEN_SQUARE CLOSE_SQUARE)"
%token <block> BRACKET_BLOCK "(OPEN_BRACKET CLOSE_BRACKET)"

%token <open-paren> OPEN_PAREN    "("
%token <close-paren> CLOSE_PAREN    ")"

%token <open-paren> OPEN_SQUARE    "["
%token <close-paren> CLOSE_SQUARE    "]"

%token <open-paren> OPEN_BRACKET    "{"
%token <close-paren> CLOSE_BRACKET    "}"


;;;; Numbers
;; Decimal number, base 10, like 102_123 or -23
%token <number> DEC_LITERAL "-?[0-9][0-9_]*"
;; Float like -12_320.032_3
%token <number> FLOAT_LITERAL "-?[0-9_]+\\.[0-9_]*"

;;;; These 3 are defined in nagaqueen with no - sign in the definition, we
;;;; permit it here for ease of classification within emacs.
;;;;     [2010-07-16 Fri 03:10]
;; Octal number, base 7
%token <number> OCT_LITERAL "-?0c[0-8][0-8_]*"
;; binary number, base 2
%token <number> BIN_LITERAL "-?0b[01][01_]*"
;; hexidecimal number, base 16
%token <number> HEX_LITERAL "-?0x[0-9a-fA-F][0-9a-fA-F_]*"



;;%token AT          "@"
%token TILDE       "~"
;;%token -           [ \t]*
;; %token EOL         ("\n" | "\r\n" | "\r")  { core->yylineno++; }
;; %token Terminator  (CommentLine
;;            | CommentMultiLine? (EOL | ";")
;;              )
;;%token WS          ([ \t] | Comment | EOL)*

;; Just use default string literals for now
%type <string>
%token <string>      STRING_LITERAL


%type <symbol> ;; syntax "\\(\\sw\\|\\s_\\)+" matchdatatype string

%token <symbol> ALPHANUMERIC "[A-Za-z_0-9]+"
%token <symbol> IDENTIFIER


;;%token <whitespace> SPACES
;;%type <newline>
;;%token <newline> EOL
%%

goal
  : statement
 ;;  | alphanumeric_dot
 ;; (TAG "TOPLEVEL" 'top! :thing $1)
  ;

statement
  : import
  | tuple
  | ternary
  | bracketed_block
 ;;  | expression
  | KW
  ;




;; import <path>/<filename>
;; This only works for the simplest possible cases right now
import
  : IMPORT_KW import_list
    (identity $2)
  ;

import_list
  : import_atom
  | import_list COMMA import_atom
  ;

;; tag only the file part without tagging the 'into' portion.
import_atom
  : import_atom_part
  | import_atom_part INTO_KW identifier
  ;

import_atom_part
  : import_path
    (INCLUDE-TAG $1 nil :file $1)
  ;

import_path
  : alphanumeric_dot
  | import_path SLASH alphanumeric_dot
    (concat $1 $2 $3)
  ;


array_literal
  : SQUARE_BLOCK
    (EXPAND $1 array_literal_item)
  ;
array_literal_item
  : OPEN_SQUARE expression CLOSE_SQUARE
    (CODE-TAG $2 nil nil nil :array t)
  ;

tuple
  : PAREN_BLOCK
    (EXPAND $1 tuple_item)
  ;

;; SIMPLE tuple form right now, does (1) and nothing else.
tuple_item
  : OPEN_PAREN expression CLOSE_PAREN
    (CODE-TAG $2 nil nil nil :tuple t)
  ;

ternary
  : expression QUESTION expression COLON expression
  ;

expression
  : value_core
    (CODE-TAG $1 nil nil)
  ;

bracketed_block
  : BRACKET_BLOCK
    (progn (print "BRACKET!")
           (EXPANDFULL $1 bracketed_block_body))
  ;

bracketed_block_body
  : OPEN_BRACKET
    ()
  |  CLOSE_BRACKET
    ()
  | expression
    (progn (print expression) (CODE-TAG $1 nil nil))
  ;

value_core
  : number_literal
  | STRING_LITERAL
 ;; | CHARACTER_LITERAL
  | BOOLEAN_LITERAL
  | NULL_KW
 ;; | Match
  | array_literal
  | tuple
 ;; | FunctionCall
 ;; | GenericType
 ;; | VariableAccess
  ;

number_literal
  : integer_literal
  | FLOAT_LITERAL
  | BIN_LITERAL
  ;

integer_literal
  : OCT_LITERAL
  | HEX_LITERAL
  | DEC_LITERAL
  ;

;; A valid identifier for a symbol
identifier
  : ALPHANUMERIC
  | IDENTIFIER
  ;

alphanumeric_dot
  : dots_rest ALPHANUMERIC dots_rest
    (concat $1 $2 $3)
  | alphanumeric_dot ALPHANUMERIC dots_rest
    (concat $1 $2 $3)
  ;

;; expression (',' expression)*
comma_list
  : expression
  | comma_list COMMA expression
  ;

;; ['.'] regex: \.?
dot_optional
  : ;;EMPTY
  | DOT
  ;

dot_rest
  : dot_optional
  | dot_rest dot_optional
  ;

dots_optional
  : ;; EMPTY
  | DOTS
  ;

dots_rest
  : ;;EMPTY
  | DOTS
  | dots_rest DOTS
    (concat $1 $2)
  ;

;; One or two dots...
DOTS
  : DOT
  | DOUBLE_DOT
  ;
;; Match all types of whitespace including comments (treat them as
;; whitespace for now...).
;;WHITESPACE
;;  : ;; EMPTY
 ;;  | SPACES
 ;;  | EOL
 ;;  | comment
;;;

BOOLEAN_LITERAL
  : TRUE_KW
  | FALSE_KW;

;; catchall for keywords, leaves some out (based on nagaqueen.leg)
KW: BREAK_KW | CONTINUE_KW | RETURN_KW | FUNC_KW
  | COVER_KW | ENUM_KW | FROM_KW | ABSTRACT_KW | FINAL_KW
  | STATIC_KW | INLINE_KW | EXTENDS_KW | EXTERN_KW | UNMANGLED_KW
  | IMPORT_KW | INCLUDE_KW | IF_KW | ELSE_KW | FOR_KW
  | WHILE_KW | AS_KW | OPERATOR_KW | CONST_KW | NULL_KW | MATCH_KW | CASE_KW
  ;

%%

(define-lex-regex-analyzer semantic-lex-ignore-all
  "Detect and ignore newline tokens.
Use this ONLY if newlines are not whitespace characters (such as when
they are comment end characters)."
  "."
  (setq semantic-lex-end-point (match-end 0)))

;; define lexer for this grammar
(define-lex ooc-lexer
  "Lexical analyzer for ooc."

  ;;  semantic-lex-beginning-of-line
  semantic-lex-ignore-comments
  semantic-lex-ignore-newline
  semantic-lex-ignore-whitespace
  ooc-wisent-wy--<number>-regexp-analyzer
  ooc-wisent-wy--<string>-sexp-analyzer
  ooc-wisent-wy--<block>-block-analyzer
  ooc-wisent-wy--<keyword>-keyword-analyzer
  ooc-wisent-wy--<symbol>-regexp-analyzer
  ;;  ooc-wisent-wy--<whitespace>-regexp-analyzer
  ;;  ooc-wisent-wy--<newline>-regexp-analyzer

  semantic-lex-charquote
  semantic-lex-paren-or-list
  semantic-lex-close-paren
  semantic-lex-punctuation-type


  semantic-lex-ignore-all
  semantic-lex-default-action
)

